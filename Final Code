/*
#################################################
PROJECT: Conveyor belt sorting
GROUP: 2
NAME 1: Daniel, Wigen, V00797593
NAME 2: Nicola, Watts, V00822833
DESC: Detects and sorts items into rotating tray,
			completes 48 pieces in 34 seconds with 100% accuracy,
			pieces to be loaded 6 at a time
DATA
REVISED
#################################################
*/

//####### Include Files #######
#include <stdlib.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include "LinkedQueue.h"
#include "mydisplay.h"

//########### Prototypes ############
void rotateTray(unsigned char dest);
void beltMotor(int beltDir);
void PWM();
void delayms(int count);
void homeTray();
void pause();
void ramp_Down();

//########## Variable Definitions ######
#define fullstepOne 0b00110110
#define fullstepTwo	0b00101110
#define fullstepThree 0b00101101
#define fullstepFour 0b00110101
#define forward	1
#define backward 0
#define brake 2
#define clkwise 0
#define cclkwise 1
#define stop 2
#define black	0
#define steel 150
#define white 100
#define aluminum 50

//########## GLOBAL VARIABLES #######
int stepdelay = 17;
char sorted_flag = 0;
volatile char pause_Flag = 0;
char sorted_black_count = 0;
char sorted_white_count = 0;
char sorted_steel_count = 0;
char sorted_aluminum_count = 0;
char unsorted_black_count = 0;
char unsorted_white_count = 0;
char unsorted_steel_count = 0;
char unsorted_aluminum_count = 0;
volatile unsigned int home_flag;
volatile unsigned int ADC_result;
volatile unsigned int ADC_lowest;
volatile unsigned int exit_flag;
volatile unsigned int ADC_result_flag;
volatile unsigned int ADC_object_flag = 0;
volatile unsigned char stepPosition = 1;
volatile unsigned char lastPosition = 0;
volatile unsigned char nextPosition = 0;
volatile unsigned char trayPosition = 0;
volatile unsigned char trayDirection = stop;
volatile unsigned int ramp_down_flag;
volatile unsigned long ramp_down_counter;

//########## MAIN ROUTINE ###########
int main(int argc, char const *argv[]) {

	// Set timer one to run at CPU Clock, Use as pure timer
	TCCR1B |=_BV(CS10);

	//trayTimerInit();
	PWM();

	cli(); //ensure interrupts are disabled

	EIMSK |= (_BV(INT5)|_BV(INT4)|_BV(INT3)|_BV(INT7)|_BV(INT6));
	EICRB |= (_BV(ISC51) | _BV(ISC50) | _BV(ISC41)|_BV(ISC71) | _BV(ISC70)|_BV(ISC61) | _BV(ISC60));
	EICRA |= (_BV(ISC31));
	//ADC Config
	ADCSRA |= _BV(ADEN);
	ADCSRA |= _BV(ADIE);
	ADMUX |=  _BV(REFS0) | _BV(MUX0);
	// Set Data Direction Registers
	DDRA = 0xFF;
	DDRC = 0xFF;
	DDRB = 0xFF;
	DDRD = 0xF0;
	DDRE = 0x03;
	PORTA = 0x00;
	PORTB = 0x00;
	PORTC = 0x00;

	sei(); //enable global interrupts
	link *head;			/* The ptr to the head of the queue */
	link *tail;			/* The ptr to the tail of the queue */
	link *newLink;		/* A ptr to a link aggregate data type (struct) */
	link *rtnLink;		/* same as the above */

	rtnLink = NULL;
	newLink = NULL;

	setup(&head, &tail);

	display_Init();
	homeTray();
	beltMotor(forward);
	while (1) {
		if(pause_Flag == 1){
			pause();
		}
		else if((ramp_down_counter > 50000) && (ramp_down_flag)){
			pause_Flag = 1;
			ramp_down_counter = 0;
			ramp_Down();
		}
		sorted_flag = 0;
		ADC_lowest = 0xFFFF;
		while((PINE & 0x20) == 0x20){
			if(ADC_result_flag == 1){
				if(ADC_lowest > ADC_result){
					ADC_lowest = ADC_result;
				}
				ADC_result_flag = 0;
				ADCSRA |= _BV(ADSC);
			}
			sorted_flag = 1;
		}
		if(sorted_flag == 1){
			PORTC = 0x01;
			ADC_result_flag = 0;
			ADC_object_flag = 0;
			sorted_flag = 0;
			initLink(&newLink);
			if(ADC_lowest > 929){
				newLink->e.material = black;
				unsorted_black_count++;
			}
			else if(ADC_lowest > 880){
				newLink->e.material = white;
				unsorted_white_count++;
			}
			else if(ADC_lowest > 350){
				newLink->e.material = steel;
				unsorted_steel_count++;
			}
			else if(ADC_lowest >= 20){
				newLink->e.material = aluminum;
				unsorted_aluminum_count++;
			}
			else{
			}
			enqueue(&head, &tail, &newLink);
		}

		if (isEmpty(&head) == 0 && exit_flag == 1) {
			dequeue(&head, &tail, &rtnLink);
			if((trayPosition - rtnLink->e.material == 50 )||(trayPosition - rtnLink->e.material == -150 )){
				trayDirection = cclkwise;
			}
			else{
				trayDirection = clkwise;
			}
			rotateTray(rtnLink->e.material);
			if(rtnLink->e.material == black){
				unsorted_black_count--;
				sorted_black_count++;
			}
			else if(rtnLink->e.material == white){
				unsorted_white_count--;
				sorted_white_count++;
			}
			else if(rtnLink->e.material == steel){
				unsorted_steel_count--;
				sorted_steel_count++;
			}
			else if(rtnLink->e.material == aluminum){
				unsorted_aluminum_count--;
				sorted_aluminum_count++;
			}
			free(rtnLink);
			trayDirection = stop;
			lastPosition = trayPosition;
			beltMotor(forward);
			exit_flag = 0;
			stepdelay = 17;
		}

		if(ramp_down_flag){
			ramp_down_counter ++;
		}
	}//end while
}//end main

ISR(ADC_vect){
  ADC_result = ADC;
  ADC_result_flag = 1;
}

ISR(INT3_vect){
	beltMotor(brake);
	exit_flag = 1;
	if(ramp_down_flag){
		ramp_down_counter = 0;
	}
}

ISR(INT4_vect){
	home_flag = 1;
}

ISR(INT5_vect){
	ADC_object_flag = 1;
	ADCSRA |= _BV(ADSC);
}

ISR(INT7_vect){
	while (PINE & 0x80 == 0x80){
	}
	if(pause_Flag == 0){
		pause_Flag =1;
	}
	else{
		pause_Flag = 0;
	}
	delayms(100);
}

ISR(INT6_vect){
	while (PINE & 0x40 == 0x40){
	}
	ramp_down_flag = 1;
}

void homeTray(){
	while(!home_flag){
		delayms(15);
		if (stepPosition == 1) {
			PORTA = fullstepTwo;
			stepPosition++;
			} else if (stepPosition == 2) {
			PORTA = fullstepThree;
			stepPosition++;
			} else if (stepPosition == 3) {
			PORTA = fullstepFour;
			stepPosition++;
			}else if (stepPosition == 4) {
			PORTA = fullstepOne;
			stepPosition = 1;
		}
	}
	trayPosition = 0;
}

void rotateTray(unsigned char dest){
	while(trayPosition != dest){
		if(abs(trayPosition - lastPosition) < 11 || abs(trayPosition - lastPosition) > 189){
			stepdelay -= 1;
		}
		if(abs(trayPosition - dest) < 10){
			stepdelay += 1;
		}
		if (trayDirection == clkwise) {
			if (stepPosition == 1) {
				PORTA = fullstepTwo;
				stepPosition++;
				} else if (stepPosition == 2) {
				PORTA = fullstepThree;
				stepPosition++;
				} else if (stepPosition == 3) {
				PORTA = fullstepFour;
				stepPosition++;
				}else if (stepPosition == 4) {
				PORTA = fullstepOne;
				stepPosition = 1;
			}
			if(trayPosition == 199){
				trayPosition = 0;
			}
			else{
				trayPosition++;
			}
		}
		else if (trayDirection == cclkwise){
			if (stepPosition == 1) {
				PORTA = fullstepFour;
				stepPosition = 4;
				} else if (stepPosition == 2) {
				PORTA = fullstepOne;
				stepPosition--;
				} else if (stepPosition == 3) {
				PORTA = fullstepTwo;
				stepPosition--;
				}else if (stepPosition == 4) {
				PORTA = fullstepThree;
				stepPosition--;
			}
			if(trayPosition == 0){
				trayPosition = 199;
			}
			else{
				trayPosition--;
			}
		}
		else{
			//do NOTHING
		}
		delayms(stepdelay);
	}
}

void pause(){
	beltMotor(brake);
	while(pause_Flag){
		display_In_Tray(sorted_aluminum_count,sorted_steel_count, sorted_black_count, sorted_white_count);
		delayms(2000);
		display_On_Belt(unsorted_aluminum_count, unsorted_steel_count, unsorted_black_count, unsorted_white_count);
		delayms(2000);
	}
	beltMotor(forward);
}

void ramp_Down(){
	beltMotor(brake);
	PORTB = 0b00000011;
	PORTA = 0x00;
	display_In_Tray(sorted_aluminum_count,sorted_steel_count, sorted_black_count, sorted_white_count);
	while(1){
	}
}
//Counter function delays for specified number of milliseconds
void delayms(int count){
	int i;
	i = 0;
	TCCR1B|=_BV(WGM12);
	OCR1A = 0x03E8;
	TCNT1 = 0x0000;
	TIFR1 |=_BV(OCF1A);
	while (i<count) {
		if((TIFR1 & 0x02) == 0x02){
			TIFR1 |=_BV(OCF1A);
			i++;
		}
	}
	return;
}

void beltMotor(int beltDir) {
	if (beltDir == 0) {
		PORTB = 0b00001000;
	}
	else if (beltDir == 1){
		PORTB = 0b00000100;
	}
	else if (beltDir == 2){
		PORTB = 0b00000000;
	}
	return;
}

void PWM() {
	TCCR0B |= _BV(CS01);
	TCCR0A |= _BV(WGM01);
	TCCR0A |= _BV(WGM00);
	TCCR0A |= _BV(COM0A1);
	OCR0A = 110;
	DDRB |= _BV(PB7);
}

/**************************************************************************************
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
	return;
}/*setup*/




/**************************************************************************************
* DESC: This initializes a link and returns the pointer to the new link or NULL if error
* INPUT: the head and tail pointers by reference
*/
void initLink(link **newLink){
	//link *l;
	*newLink = malloc(sizeof(link));
	(*newLink)->next = NULL;
	return;
}/*initLink*/




/****************************************************************************************
*  DESC: Accepts as input a new link by reference, and assigns the head and tail
*  of the queue accordingly
*  INPUT: the head and tail pointers, and a pointer to the new link that was created
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){

	if (*t != NULL){
		/* Not an empty queue */
		(*t)->next = *nL;
		*t = *nL; //(*t)->next;
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
		*t = *nL;
	}/* else */
	return;
}/*enqueue*/




/**************************************************************************************
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* INPUT: The head and tail pointers, and a ptr 'deQueuedLink'
* 		 which the removed link will be assigned to
*/
/* This will remove the link and element within the link from the head of the queue */
void dequeue(link **h,link **t, link **deQueuedLink){
	/* ENTER YOUR CODE HERE */
	*deQueuedLink = *h;	// Will set to NULL if Head points to NULL
	/* Ensure it is not an empty queue */
	if (*h != NULL){
		*h = (*h)->next;
	}/*if*/
	if(*h == NULL){
		*t = NULL;
	}
	return;
}/*dequeue*/




/**************************************************************************************
* DESC: Peeks at the first element in the list
* INPUT: The head pointer
* RETURNS: The element contained within the queue
*/
/* This simply allows you to peek at the head element of the queue and returns a NULL pointer if empty */
element firstValue(link **h){
	return((*h)->e);
}/*firstValue*/





/**************************************************************************************
* DESC: deallocates (frees) all the memory consumed by the Queue
* INPUT: the pointers to the head and the tail
*/
/* This clears the queue */
void clearQueue(link **h, link **t){

	link *temp;

	while (*h != NULL){
		temp = *h;
		*h=(*h)->next;
		free(temp);
	}/*while*/

	/* Last but not least set the tail to NULL */
	*t = NULL;

	return;
}/*clearQueue*/





/**************************************************************************************
* DESC: Checks to see whether the queue is empty or not
* INPUT: The head pointer
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
}/*isEmpty*/

char isTailEmpty(link **t){
	/* ENTER YOUR CODE HERE */
	return(*t == NULL);
}/*isEmpty*/



/**************************************************************************************
* DESC: Obtains the number of links in the queue
* INPUT: The head and tail pointer
* RETURNS: An integer with the number of links in the queue
*/
/* returns the size of the queue*/
int size(link **h, link **t){

	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
		numElements++;
		temp = temp->next;
	}/*while*/

	return(numElements);
}/*size*/
